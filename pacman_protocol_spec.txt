Student Number: 19076322

Pacman v1 Protocol Specification
================================



Terminology
===========


This specification uses the terms MUST, SHOULD, and MAY as defined in RFC 2119 [rfc2119]


The PacMan v1 protocol runs over TCP, using a well known port of 5432.
There are 7 message types: MAZE, STATUS, SCORE, GHOST_UPDATE, PACMAN_UPDATE, PACMAN_RETURN, and DEATHS.


The following terminology is used in this specification to distinguish between visiting pacmen and various game objects:

1. LOCAL: a game object that is currently on the local screen.
2. AWAY: a pacman that is currently away on the remote screen.
3. REMOTE: a game object on the remote screen that an AWAY pacman may interact with.
4. FOREIGN: the pacman that is local to the remote screen when it's visiting our screen.


All modelling is done on the local computer, even if your pacman is on the remote screen. This allows fast interaction between keypresses and motion in the model which is necessary to turn corners precisely.


In this version of pacman ghosts may not traverse tunnels to visit the remote screen.


When the game is started, each computer sends the other a copy of its maze (including location of all food and powerpills) in a MAZE message, as the mazes of client and server differ slightly. The local model keeps two mazes in memory - the LOCAL one and the REMOTE one. Whenever the REMOTE or AWAY pacman eats food or powerpills on the REMOTE screens, MAZE messages are sent to the LOCAL computer so it can update its copy of the REMOTE maze. The LOCAL computer receives these messages even if the pacman is LOCAL.


The game board has the following states associated with it: STARTUP, CHASE, FRIGHTEN, GAME_OVER, NEXT_LEVEL and RESTART. Changes of these states are communicated using STATUS messages. 

Gameplay happens in only the CHASE and FRIGHTEN states (the difference between them being whether a power pill was recently eaten).

The software is in STARTUP state while the starting jingle plays.

If either player loses their final life the game will end. The losing player's computer will go into GAME_OVER state and then sends a status update message, causing the other player's computer to go into GAME_OVER state.

From GAME_OVER state, if local player presses "r" to restart, the local computer goes into RESTART state and sends a status update message. The game then restarts when the other player also presses "r", and this sends a replying RESTART status update.

When a level is cleared on one screen, that computer goes into NEXT_LEVEL state while it plays the jingle. Completing a level doesn't affect the level being played on the other screen, except the pacmen positions are reset.


Whenever a pacman's score changes, whether it is LOCAL or AWAY, the local system sends the remote system a SCORE message.


When a pacman is away the remote system sends GHOST_UPDATE messages continually for each of the four ghosts on the REMOTE screen. This gives the position, speed, direction and mode of each ghost on the REMOTE screen. The mode of a ghost includes whether it's in FRIGHTEN mode (is blue and edible), CHASE mode, SCATTER mode and EYES mode among others. A model uses this information to update a LOCAL model of the REMOTE ghosts to determine if our pacman was either killed by one or has eaten one.


PACMAN_UPDATE messages are sent continually to the REMOTE computer when the LOCAL pacman becomes AWAY. These messages check if the pacman is AWAY or LOCAL and if it is AWAY the message will contain the following information about the pacman: its current position, direction and speed. If the pacman is LOCAL a PACMAN_UPDATE will be sent and the REMOTE side will stop displaying the pacman.


Some events require that our AWAY pacman is forcibly sent home, for example when a level is completed on the REMOTE screen. The REMOTE system sends a PACMAN_RETURN message and the LOCAL system will then reset its pacman to LOCAL and send a PACMAN_UPDATE message in reply.


Lastly DEATH messages are sent in different forms if either the LOCAL model detects that their AWAY pacman has eaten a REMOTE ghost to update the REMOTE system or if the LOCAL model detects that their pacman was killed by a REMOTE ghost.



Determining Player 1 vs Player 2
================================


Since this game has two players, we must have an unambiguous agreement as to which player is which. For the PacMan v1 protocol it MUST be that the server is player 1 and the client is player 2, although after these player titles are assigned there is no difference in the functionality of either system. Using this method means no messages need to be sent to the network and it is therefor very efficient.



Message Contents
================


The contents of a MAZE message are:

- Type: MAZE

- Value: An array containing the position of all walls, food and power pills in a maze. This is done using multiple strings of ASCII characters, '#', '/', \', '|' and '-' for the walls, '.' for the food, '*' for the powerpills, ' ' for gaps and either 'A' or 'B' to indicate a tunnel exit or entrance.


The contents of a STATUS message are:

- Type: STATUS

- Value: Current state of the game. ASCII text encoding of six types; STARTUP, CHASE, FRIGHTEN, GAME_OVER, NEXT_LEVEL and RESTART.


The contents of a SCORE message are:

- Type: SCORE

- Value: An integer value that is greater or equal to zero. There is no upper limit on the number so it SHOULD be stored in a 32 bit memory space.


The contents of a GHOST_UPDATE message are:

- Type: GHOST_UPDATE

- Position: X and Y position for. X will be an integer in the range 0 to 650, where 0 is the left of the screen and 600 is the right of the screen. Y will be an integer in the range 0 to 800 where 0 is the top of the screen and 800 is the bottom of the screen. 

- Direction: Character encoding of four types: LEFT, RIGHT, UP and DOWN.

- Speed: Speed of the ghost in position units per 20ms. This will be an unsigned value.		

- Mode: Character encoding of types: CHASE, FRIGHTEN, SCATTER, EYES, FRIGHTEN_TRAPPED and REMOTE.


The contents of a PACMAN_UPDATE message are:

- Type: PACMAN_UPDATE

- System: Either a 0 or a 1, where 0 corresponds to the pacman being LOCAL and 1 corresponds to the pacman being AWAY. 

- Position: X and Y position of the pacman. X is an integer in the range 0 to 650, where 0 is the left of the screen and 600 is the right of the screen. Y is an integers in the range 0 to 800  where 0 is the top of the screen and 800 is the bottom of the screen. 

- Direction: Character encoding of four types: LEFT, RIGHT, UP and DOWN.

- Speed: Speed of the pacman in position units per 20ms. This will be an unsigned value.


The contents of a PACMAN_GO message are:

- Type: PACMAN_RETURN

- Value: An integer value of 1, since this message is only sent when the AWAY pacman must be sent back to the LOCAL screen.


The contents of a DEATH message are:

- Type: DEATH

- Value: A 0 is sent if the LOCAL model detects that their AWAY pacman has eaten a REMOTE ghost and a 1 is sent if the LOCAL model detects that their pacman was killed by a REMOTE ghost.



Message Timing
==============


While the game is in gameplay mode (i.e STATUS value of CHASE or FRIGHTEN), MAZE, GHOST_UPDATE and PACMAN_UPDATE messages SHOULD be sent every 20ms, as this is the typical reaction time of a human. If a computer cannot maintain 50 frames per second, these messages MAY be sent once per frame, as it is unreasonable to update the remote computer more often than the local one. STATUS and SCORE MUST also be sent continuously but do not need to be sent as frequently as the previously mentioned messages. They SHOULD be sent every 0.5 seconds. DEATH and PACMAN_RETURN messages SHOULD only be sent when conditions are right for them.



Message Encoding
================


Messages are fixed format, ASCII encoded and separated by a newline character. CR characters MUST NOT be sent. More than one message MAY be sent consecutively in a single packet - this may be useful to reduce overhead when sending MAZE, GHOST_UPDATE and PACMAN_UPDATE messages at the same time.


MAZE message format
-------------------

MAZE messages are encoded as follows:

MAZE: maze=<maze><newline>

"MAZE" MUST be capitalised, and MUST immediately follow a newline character. The fields MUST be separated by a single space character. The protocol MUST ignore any unknown fields.

<maze> is an array of ASCII characters with each element representing a row of the maze. The array must start with a "[" and end with a "]", each element must be enclosed in double quotes (i.e "") and be separates by a comma (i.e ,). Each element must be 84 characters long and MUST only consist of a series of the following characters: 'A', 'B', Ô#Õ, "/", "\", "-", "|", Ô.Õ, Ô*Õ and Ô Ô.


STATUS message format
---------------------

STATUS messages are of variable length, encoded as follows:

STATUS: state=<state><newline>

ÒSTATUSÓ MUST be capitalised and MUST immediately follow a newline character. The fields MUST be separated by a single space character. The protocol MUST ignore any unknown fields.

<state> is an ASCII character encoding and MUST only be a string of the following types: STARTUP, CHASE, FRIGHTEN, GAME_OVER, NEXT_LEVEL or RESTART.


SCORE message format
--------------------

SCORE messages are of variable length, encoded as follows:

SCORE: score=<score><newline>

ÒSCOREÓ MUST be capitalised and MUST immediately follow a newline character. The fields MUST be separated by a single space character. The protocol MUST ignore any unknown fields.

<score> is a decimal encoding of the current score number and MUST be greater than or equal to 0.


GHOST_UPDATE message format
---------------------------

GHOST_UPDATE messages are of variable length, encoded as follows:

GHOSTS: X=<ghost_xpos> Y=<ghost_ypos> D=<ghost_direction> S=<ghost_speed> mode=<mode><newline>

ÒGHOSTSÓ MUST be capitalised and MUST immediately follow a newline character. The fields MUST be separated by a single space character. The protocol MUST ignore any unknown fields.

<ghost_xpos> and <ghost_ypos> are both decimal ASCII encoding of the ghostÕs position. <ghost_xpos> MUST be in the range 0 to 650 and <ghost_ypos> MUST be in the range 0 to 800.
<ghost_direction> is an ASCII character encoding and MUST only be of the following types: LEFT, RIGHT, UP or DOWN.
<ghost_speed> is a decimal ASCII encoding of the ghostÕs speed.
<mode> is an ASCII character encoding and MUST only be of the following types: CHASE, FRIGHTEN, SCATTER, EYES, FRIGHTEN_TRAPPED or REMOTE.




PACMAN_UPDATE message format
----------------------------

PACMAN_UPDATE messages are of variable length, encoded as follows:

PACMAN: system=<local_away> xposition=<pacman_xpos> yposition=<pacman_ypos> direction=<pacman_direction> speed=<pacman_speed><newline>

ÒPACMANÓ MUST be capitalised and MUST immediately follow a newline character. The fields MUST be separated by a single space character. The protocol MUST ignore any unknown fields.

<local_away> is a decimal ASCII encoding of the pacmanÕs current location. A 0 corresponds to the pacman being LOCAL and a 1 corresponds to the pacman being AWAY. If the value of <local_away> is 0 the rest of this message SHOULD be ignored.
<pacman_xpos> and <pacman_ypos> are both decimal ASCII encoding of the pacmanÕs position. <pacman_xpos> MUST be in the range 0 to 650 and <pacman_ypos> MUST be in the range 0 to 800.
<pacman_direction> is an ASCII character encoding and MUST only be of the following types: LEFT, RIGHT, UP or DOWN.
<pacman_speed> is a decimal ASCII encoding of the pacmanÕs speed.


PACMAN_RETURN message format
----------------------------

PACMAN_RETURN messages are encoded as follows:

RETURN: return=<return><newline>

ÒRETURNÓ MUST be capitalised and MUST immediately follow a newline character. The fields MUST be separated by a single space character. The protocol MUST ignore any unknown fields.

<return> is a decimal ASCII encoding and MUST only have a value of 1.


DEATH message format
--------------------

DEATH messages are encoded as follows:

DEATH: dead=<ghost_pacman_dead> n=<ghost_num><newline>

ÒDEATHÓ MUST be capitalised and MUST immediately follow a newline character. The fields MUST be separated by a single space character. The protocol MUST ignore any unknown fields.

<ghost_pacman_dead> is a decimal ASCII encoding that communicates if a ghost or pacman has died. A 0 is sent if the LOCAL model detects that their AWAY pacman has eaten a REMOTE ghost and a 1 is sent if the LOCAL model detects that their pacman was killed by a REMOTE ghost. If a 1 is read the rest of the message SHOULD be ignored.
<ghost_num> is a decimal ASCII encoding that MUST have a value in the range 1 to 4 that indicates the number of the ghost that has died.


ABNF Grammar
------------

connection =			1*(msg newline)

msg =				maze | status | score | ghost_update | pacman_update |					pacman_return | death

maze_msg =			ÒMAZE:Ó space maze_field

maze_field =			Òmaze=Ó list

status_msg =			ÒSTATUS:Ó space status_field

status_field =			Òstate=Ó state

state = 			"STARTUP" | "CHASE" | "FRIGHTEN" | "GAME_OVER" |  "NEXT_LEVEL" | "RESTART"

score_msg =			ÒSCORE:Ó space score_field

score_field =			Òscore=Ó integer

ghost_update_msg =		ÒGHOSTS:Ó space ghost_xpos_field space ghost_ypos_field space ghost_direction_field space ghost_speed_field space mode_field

ghost_xpos_field =		ÒX=Ó integer

ghost_ypos_field =		ÒY=Ó integer

ghost_direction_field =		ÒD=Ó directions

ghost_speed_field =		ÒS=Ó integer
		
mode_field =			Òmode=Ó modes

modes =				"CHASE" | "FRIGHTEN" | "EYES" | "SCATTER" |  "FRIGHTEN_TRAPPED" | "REMOTE"

pacman_update_msg =		ÒPACMAN:Ó space local_away_field space pacman_xpos_field space pacman_ypos_field space pacman_direction_field space pacman_speed_field

local_away_field =		Òsystem=Ó integer

pacman_xpos_field =		Òxposition=Ó integer

pacman_ypos_field =		Òyposition=Ó integer

pacman_direction_field =	Òdirection=Ó directions

pacman_speed_field =		Òspeed=Ó integer

pacman_return_msg =		ÒRETURN:Ó space return_field

return_field =			Òreturn=Ó integer

death_msg =			ÒDEATH:Ó space ghost_pacman_dead_field space ghost_num_field

ghost_pacman_dead_field =	Òdead=Ó integer

ghost_num_field =		Òn=Ó integer

directions =			"UP" | "DOWN" | "LEFT" | "RIGHT"

integer =			POS-DIGIT *(DIGIT)

alpha-numeric =			ALPHA | DIGIT

DIGIT =				Ò0Ó | POS-DIGIT

POS-DIGIT =			Ò1Ó | Ó2Ó | Ó3Ó | Ó4Ó | Ó5Ó | Ó6Ó | Ó7Ó | Ó8Ó | Ó9Ó 

list =				"[" *(""" *(CHAR) """ ",") (""" *(CHAR) """) "]"

space =				%d32

newline =			%d1

CHAR = 				%x01-7F
